<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Video Call</title>
    <style>
        #chat {
            margin-top: 20px;
        }

        #messages {
            height: 200px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>

<body>

    <div id="joinScreen">
        <h1>Join a Video Call</h1>
        <input type="email" id="email" placeholder="Enter your email" required>
        <input type="text" id="room" placeholder="Enter room code" required>
        <button onclick="joinRoom()">Join</button>
    </div>

    <div id="callScreen">
        <div id="chat">
            <h2>Chat</h2>
            <div id="messages"></div>
            <input type="text" id="messageInput" placeholder="Type a message...">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <!-- Include the Socket.IO client script (served automatically from your server) -->
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
    <script>
        // Connect to the Socket.IO server
        const socket = io();
        let room;


        // to join the room with email id and roomcode
        function joinRoom() {
            const email = document.getElementById('email').value.trim();
            room = document.getElementById('room').value.trim();
            if (email && room) {
                socket.emit('joinRoom', { email, room });
                document.getElementById('joinScreen').style.display = 'none';
                document.getElementById('callScreen').style.display = 'block';
                startCall();
            } else {
                alert('Please enter both email and room code.');
            }
        }
        // Create a new RTCPeerConnection
        const peerConnection = new RTCPeerConnection();
        // Handle ICE candidates and send them via Socket.IO
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit('signal', { room, candidate: event.candidate });
            }
        };

        // Listen for signaling messages from the server
        socket.on('signal', async (data) => {
            if (data.sdp) {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
                if (data.sdp.type === 'offer') {
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    socket.emit('signal', { room, sdp: peerConnection.localDescription });
                }
            } else if (data.candidate) {
                await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
            }
        });

        // Optionally, automatically create an offer after a short delay if this client is initiating the call
        function startCall() {
            setTimeout(async () => {
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    socket.emit('signal', { room, sdp: offer });
                } catch (err) {
                    console.error('Error creating offer:', err);
                }
            }, 1000);
        }

        // Chat functionality
        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            if (message) {
                socket.emit('chatMessage', { room, message });
                displayMessage(`You: ${message}`);
                messageInput.value = '';
            }
        }

        socket.on('chatMessage', (data) => {
            displayMessage(`RemoteUser: ${data.message}`);
        });

        function displayMessage(message) {
            const messagesDiv = document.getElementById('messages');
            const messageElement = document.createElement('p');
            messageElement.textContent = message;
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
    </script>
</body>

</html>